class Solution:
    def num_trees(self, n: int) -> int:
        """
        动态规划
        将每个值都定义一次为根节点，通过其左边的值构建左子树，右边的值构建右子数
        再计算左子树与右子树构建有n1,n2种, 可得这个值作为根节点可构建的次数 n1 * n2

        假设给定值为7, 值为1-7,  定义根节点为3， 左子树为[1,2] 右子树为[4,5,6,7]
        因为子树能构建多少种，只能序列长度有关，与值无关, 所以可以假想成F(3, 7) = T(2) + T(4)
        即m(n) = m(i - 1) * m(n - i)
        """
        m = [0] * (n + 1)
        m[0], m[1] = 1, 1

        for i in range(2, n + 1):
            for j in range(1, i + 1):
                m[i] += m[j - 1] * m[i - j]

        return m[n]
